<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CS50P: 0. Functions, Variables</title>
    <link href="/2024/07/16/CS50P-0-Functions-Variables/"/>
    <url>/2024/07/16/CS50P-0-Functions-Variables/</url>
    
    <content type="html"><![CDATA[<p>interactive mode</p><p>注：单引号和双引号在python中有同样的作用</p><h2 id="functions"><a class="markdownIt-Anchor" href="#functions"></a> functions</h2><p>CLI：command line interface</p><p>GUI：graphical user interface</p><h3 id="print"><a class="markdownIt-Anchor" href="#print"></a> print()</h3><p><code>print("hello, " + name)</code>  连接 <code>+</code></p><p><code>print("hello,",name)</code> 多个argument(参数) 输出用 <code>,</code> 隔开，会自动添加空格</p><p><code>print("hello, world")</code> 会自动换行（更好的理解：光标移动到下一行）</p><p><code>print('hello, "friend"')</code> 引号保持一致可以输出，输出 <code>hello, "friend"</code></p><p><code>print("hello, \"friend\"")</code> 转义也可以输出引号</p><h4 id="函数参数"><a class="markdownIt-Anchor" href="#函数参数"></a> 函数参数</h4><p>Default:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(*objects, sep=<span class="hljs-string">' '</span>, end=<span class="hljs-string">'\n'</span>, file=sys.stdout, flush=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><h4 id="字符串格式化"><a class="markdownIt-Anchor" href="#字符串格式化"></a> 字符串格式化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">f"hello, <span class="hljs-subst">{name}</span>"</span>)<br></code></pre></td></tr></table></figure><p>字符串前加上 <code>f</code></p><h2 id="variables"><a class="markdownIt-Anchor" href="#variables"></a> variables</h2><p><strong>store the returned values and do something</strong></p><h3 id="str"><a class="markdownIt-Anchor" href="#str"></a> str</h3><p><code>name = name.strip()</code></p><p>返回移除字符串头尾指定的字符生成的新字符串（默认为空格或换行符）</p><p><code>name = name.capitalize()</code></p><p>Capitalize the very first letter</p><p><code>name = name.title()</code></p><p>Capitalize the first letter of each word</p><p><code>name = name.strip().title()</code></p><p>和分开写的效果一样</p><p><code>first, last = name.split()</code></p><p>按序返回，并能同时赋给左边的变量</p><p><strong>只有函数的返回值是<code>str</code> 时，才能用 <code>.func()</code> 的方式调用</strong></p><h3 id="int"><a class="markdownIt-Anchor" href="#int"></a> int</h3><h4 id="范围"><a class="markdownIt-Anchor" href="#范围"></a> 范围</h4><p>在python中，int类型可以无限大</p><h4 id="加法"><a class="markdownIt-Anchor" href="#加法"></a> 加法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-built_in">input</span>(<span class="hljs-string">"What's x? "</span>)<br>y = <span class="hljs-built_in">input</span>(<span class="hljs-string">"What's y? "</span>)<br>z = x + y<br><span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><p><code>+</code> 会把 <code>x</code> 字符串和 <code>y</code> 字符串连在一起，那何时做整数加法？修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">z = <span class="hljs-built_in">int</span>(x) + <span class="hljs-built_in">int</span>(y)<br></code></pre></td></tr></table></figure><p>由此观之，<code>int</code> 还是一个函数，把输入的字符串 <code>x</code> 变为可以运算的整数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">"What's x? "</span>))<br>y = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">"What's y? "</span>))<br><span class="hljs-built_in">print</span>(x + y)<br></code></pre></td></tr></table></figure><p><strong>内层函数的返回值(return value)会作为外层函数的参数(argument)</strong></p><p>所以还可以这样写（但这样会增加阅读难度和犯错概率）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">"What's x? "</span>)) + <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">"What's y? "</span>)))<br></code></pre></td></tr></table></figure><h3 id="float"><a class="markdownIt-Anchor" href="#float"></a> float</h3><h4 id="四舍五入近似"><a class="markdownIt-Anchor" href="#四舍五入近似"></a> 四舍五入近似</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">round</span>(number[, ndigits])<br></code></pre></td></tr></table></figure><p>保留成最近的整数，ndigits表示近似到几位</p><p><code>[]</code> 括起来表示括号里面的内容是可以选择写或不写的</p><h4 id="格式化输出小数位数"><a class="markdownIt-Anchor" href="#格式化输出小数位数"></a> 格式化输出：小数位数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">f"<span class="hljs-subst">{z:<span class="hljs-number">.2</span>f}</span>"</span>)<br></code></pre></td></tr></table></figure><h4 id="格式化输出每三位一个逗号"><a class="markdownIt-Anchor" href="#格式化输出每三位一个逗号"></a> 格式化输出：每三位一个逗号</h4><p>想输出 <code>1,000,000</code> ？</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">f"<span class="hljs-subst">{z:,}</span>"</span>)<br></code></pre></td></tr></table></figure><h2 id="自定义函数"><a class="markdownIt-Anchor" href="#自定义函数"></a> 自定义函数</h2><h3 id="def"><a class="markdownIt-Anchor" href="#def"></a> def</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>():<span class="hljs-comment">#()为空表示不接收参数</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"hello"</span>)<span class="hljs-comment">#只要有四个缩进就是定义的函数的内容</span><br></code></pre></td></tr></table></figure><p>一个sayhello程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">to=<span class="hljs-string">"world"</span></span>):<span class="hljs-comment">#给参数一个默认值</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"hello,"</span>,to)<br><br>hello()<span class="hljs-comment">#没有参数argument，就会代入默认的world</span><br>name = <span class="hljs-built_in">input</span>(<span class="hljs-string">"What's your name? "</span>).strip().title()<br>hello(name)<br></code></pre></td></tr></table></figure><h3 id="规范"><a class="markdownIt-Anchor" href="#规范"></a> 规范</h3><p>先define，再call</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    name = <span class="hljs-built_in">input</span>(<span class="hljs-string">"What's your name? "</span>).strip().title()<br>    hello(name)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">to=<span class="hljs-string">"world"</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"hello,"</span>,to)<br><br>main()<br></code></pre></td></tr></table></figure><h3 id="scope作用范围"><a class="markdownIt-Anchor" href="#scope作用范围"></a> scope作用范围</h3><p>变量在定义它的函数中起作用（和C差不多）</p><h3 id="return返回值"><a class="markdownIt-Anchor" href="#return返回值"></a> return返回值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    x= <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">"What's x? "</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">"x squared is"</span>,square(x))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">square</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">return</span> n * n<br><br>main()<br></code></pre></td></tr></table></figure><h4 id="ps-乘方运算"><a class="markdownIt-Anchor" href="#ps-乘方运算"></a> ps. 乘方运算</h4><p>例如：计算 <code>n^2</code></p><p><code>pow(n, 2)</code> 或 <code>n**2</code></p><h2 id="comments"><a class="markdownIt-Anchor" href="#comments"></a> comments</h2><p>note for myself</p><ul><li>intention</li><li>Posedocode: outline the program in advance(to-do list)</li></ul><p>单行注释：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># ...comment</span><br></code></pre></td></tr></table></figure><p>多行注释：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">"""</span><br><span class="hljs-string">...comment</span><br><span class="hljs-string">"""</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/07/16/hello-world/"/>
    <url>/2024/07/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
